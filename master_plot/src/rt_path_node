#!/usr/bin/python3
import sys
sys.path.append('master_plot')
sys.path.append('../')

from plot_lib import animate_path

import numpy as np
import rospy
from gazebo_msgs.msg import ModelStates
import matplotlib.pyplot as plt
import threading
from master_msgs.msg import node_frame2

# fig, ax = plt.subplots(2, 2)
# ax = plt.subplot(2, 1, 2)

fig, axs = plt.subplots(1,1)

ax_agents = plt.subplot(111, aspect ='equal')
# ax_agent = plt.subplot(122, aspect ='equal')
# ax_dis_anchor = plt.subplot(212)

if len(sys.argv) < 2:
    print("no robot number input, default number 4")
    num_robot = 4
else:
    num_robot = int(sys.argv[1])
    print("Current robot number: ", num_robot)

anp_agents = animate_path(fig, ax_agents, num_robot, line_len = 30)
# anp_agent = animate_path(fig, ax_agent, num_robot, keep=True)
# anp_dis_anchor = animate_path(fig, ax_dis_anchor, 5, mode='1d', name ='agent2toAnchor', ylim = [-70, -90])

def callback(data):

    coordinate_list = []

    agent_names = data.name
    agent_poses = data.pose
    agent_twists= data.twist

    for pose in agent_poses:

        x = pose.position.x
        y = pose.position.y

        coordinate_list.append([x, y])

    anp_agents.update_coordinate(coordinate_list)
    # anp_agent.update_coordinate(coordinate_list)

def uwb_callback(data):

    data_list = []

    for node in data.nodes:
        # data_list.append(node.distance)
        data_list.append(node.fpRssi)

    # if len(data_list) == 5:
    #     anp_dis_anchor.update_data_1d(data_list)

def path_plot():

    rospy.init_node('rt_path_node')
    rospy.Subscriber('/global/model_states', ModelStates, callback)
    # rospy.Subscriber('/agent3/nlink_linktrack_nodeframe2', node_frame2, uwb_callback)
    
    anp_agents.ani_plot()
    # anp_agent.ani_plot()
    # anp_dis_anchor.ani_plot()

    plt.show()

def spin_callback():
    rospy.spin()
    
# def plot_sub():
#     anp_1.ani_plot()

if __name__ == "__main__":

    thread_callback = threading.Thread(target = spin_callback, name='ros_callback', daemon=True)
    path_plot()
    thread_callback.start()
    
    # thread_subplot = threading.Thread(target = plot_sub, name='subplot', daemon=True)
    # thread_subplot.start()

    
    
    