// Generated by gencpp from file master_msg/system_info.msg
// DO NOT EDIT!


#ifndef MASTER_MSG_MESSAGE_SYSTEM_INFO_H
#define MASTER_MSG_MESSAGE_SYSTEM_INFO_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace master_msg
{
template <class ContainerAllocator>
struct system_info_
{
  typedef system_info_<ContainerAllocator> Type;

  system_info_()
    : product_name()
    , hardware_version()
    , firmware_version()
    , baudrate(0)  {
    }
  system_info_(const ContainerAllocator& _alloc)
    : product_name(_alloc)
    , hardware_version(_alloc)
    , firmware_version(_alloc)
    , baudrate(0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _product_name_type;
  _product_name_type product_name;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _hardware_version_type;
  _hardware_version_type hardware_version;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _firmware_version_type;
  _firmware_version_type firmware_version;

   typedef int32_t _baudrate_type;
  _baudrate_type baudrate;





  typedef boost::shared_ptr< ::master_msg::system_info_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::master_msg::system_info_<ContainerAllocator> const> ConstPtr;

}; // struct system_info_

typedef ::master_msg::system_info_<std::allocator<void> > system_info;

typedef boost::shared_ptr< ::master_msg::system_info > system_infoPtr;
typedef boost::shared_ptr< ::master_msg::system_info const> system_infoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::master_msg::system_info_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::master_msg::system_info_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace master_msg

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'master_msg': ['/home/ubuntu/catkin_ws/src/master_multirobot/master_msg/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::master_msg::system_info_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::master_msg::system_info_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::master_msg::system_info_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::master_msg::system_info_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::master_msg::system_info_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::master_msg::system_info_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::master_msg::system_info_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7aebdbbdd195647dad628f7de30a6855";
  }

  static const char* value(const ::master_msg::system_info_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7aebdbbdd195647dULL;
  static const uint64_t static_value2 = 0xad628f7de30a6855ULL;
};

template<class ContainerAllocator>
struct DataType< ::master_msg::system_info_<ContainerAllocator> >
{
  static const char* value()
  {
    return "master_msg/system_info";
  }

  static const char* value(const ::master_msg::system_info_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::master_msg::system_info_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string product_name\n\
string hardware_version\n\
string firmware_version\n\
int32 baudrate\n\
";
  }

  static const char* value(const ::master_msg::system_info_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::master_msg::system_info_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.product_name);
      stream.next(m.hardware_version);
      stream.next(m.firmware_version);
      stream.next(m.baudrate);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct system_info_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::master_msg::system_info_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::master_msg::system_info_<ContainerAllocator>& v)
  {
    s << indent << "product_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.product_name);
    s << indent << "hardware_version: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.hardware_version);
    s << indent << "firmware_version: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.firmware_version);
    s << indent << "baudrate: ";
    Printer<int32_t>::stream(s, indent + "  ", v.baudrate);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MASTER_MSG_MESSAGE_SYSTEM_INFO_H
