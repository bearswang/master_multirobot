# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from master_msg/tag_frame0.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import master_msg.msg

class tag_frame0(genpy.Message):
  _md5sum = "50810e8ed732bc3be1c295ba94186d48"
  _type = "master_msg/tag_frame0"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """uint8 id
vector3d_t position
vector3d_t velocity
float32[8] distances
vector3d_t imuGyro
vector3d_t imuAcc
vector3d_t angle
float32[4] quaternions
uint32 systemTime
uint8 accWorkNormal
uint8 accIsOnLine
uint8 gyroWorkNormal
uint8 gyroIsOnLine
vector3d_t eop
float32 supplyVoltage

================================================================================
MSG: master_msg/vector3d_t
float32 x
float32 y
float32 z
"""
  __slots__ = ['id','position','velocity','distances','imuGyro','imuAcc','angle','quaternions','systemTime','accWorkNormal','accIsOnLine','gyroWorkNormal','gyroIsOnLine','eop','supplyVoltage']
  _slot_types = ['uint8','master_msg/vector3d_t','master_msg/vector3d_t','float32[8]','master_msg/vector3d_t','master_msg/vector3d_t','master_msg/vector3d_t','float32[4]','uint32','uint8','uint8','uint8','uint8','master_msg/vector3d_t','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       id,position,velocity,distances,imuGyro,imuAcc,angle,quaternions,systemTime,accWorkNormal,accIsOnLine,gyroWorkNormal,gyroIsOnLine,eop,supplyVoltage

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(tag_frame0, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.id is None:
        self.id = 0
      if self.position is None:
        self.position = master_msg.msg.vector3d_t()
      if self.velocity is None:
        self.velocity = master_msg.msg.vector3d_t()
      if self.distances is None:
        self.distances = [0.] * 8
      if self.imuGyro is None:
        self.imuGyro = master_msg.msg.vector3d_t()
      if self.imuAcc is None:
        self.imuAcc = master_msg.msg.vector3d_t()
      if self.angle is None:
        self.angle = master_msg.msg.vector3d_t()
      if self.quaternions is None:
        self.quaternions = [0.] * 4
      if self.systemTime is None:
        self.systemTime = 0
      if self.accWorkNormal is None:
        self.accWorkNormal = 0
      if self.accIsOnLine is None:
        self.accIsOnLine = 0
      if self.gyroWorkNormal is None:
        self.gyroWorkNormal = 0
      if self.gyroIsOnLine is None:
        self.gyroIsOnLine = 0
      if self.eop is None:
        self.eop = master_msg.msg.vector3d_t()
      if self.supplyVoltage is None:
        self.supplyVoltage = 0.
    else:
      self.id = 0
      self.position = master_msg.msg.vector3d_t()
      self.velocity = master_msg.msg.vector3d_t()
      self.distances = [0.] * 8
      self.imuGyro = master_msg.msg.vector3d_t()
      self.imuAcc = master_msg.msg.vector3d_t()
      self.angle = master_msg.msg.vector3d_t()
      self.quaternions = [0.] * 4
      self.systemTime = 0
      self.accWorkNormal = 0
      self.accIsOnLine = 0
      self.gyroWorkNormal = 0
      self.gyroIsOnLine = 0
      self.eop = master_msg.msg.vector3d_t()
      self.supplyVoltage = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_B6f().pack(_x.id, _x.position.x, _x.position.y, _x.position.z, _x.velocity.x, _x.velocity.y, _x.velocity.z))
      buff.write(_get_struct_8f().pack(*self.distances))
      _x = self
      buff.write(_get_struct_9f().pack(_x.imuGyro.x, _x.imuGyro.y, _x.imuGyro.z, _x.imuAcc.x, _x.imuAcc.y, _x.imuAcc.z, _x.angle.x, _x.angle.y, _x.angle.z))
      buff.write(_get_struct_4f().pack(*self.quaternions))
      _x = self
      buff.write(_get_struct_I4B4f().pack(_x.systemTime, _x.accWorkNormal, _x.accIsOnLine, _x.gyroWorkNormal, _x.gyroIsOnLine, _x.eop.x, _x.eop.y, _x.eop.z, _x.supplyVoltage))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.position is None:
        self.position = master_msg.msg.vector3d_t()
      if self.velocity is None:
        self.velocity = master_msg.msg.vector3d_t()
      if self.imuGyro is None:
        self.imuGyro = master_msg.msg.vector3d_t()
      if self.imuAcc is None:
        self.imuAcc = master_msg.msg.vector3d_t()
      if self.angle is None:
        self.angle = master_msg.msg.vector3d_t()
      if self.eop is None:
        self.eop = master_msg.msg.vector3d_t()
      end = 0
      _x = self
      start = end
      end += 25
      (_x.id, _x.position.x, _x.position.y, _x.position.z, _x.velocity.x, _x.velocity.y, _x.velocity.z,) = _get_struct_B6f().unpack(str[start:end])
      start = end
      end += 32
      self.distances = _get_struct_8f().unpack(str[start:end])
      _x = self
      start = end
      end += 36
      (_x.imuGyro.x, _x.imuGyro.y, _x.imuGyro.z, _x.imuAcc.x, _x.imuAcc.y, _x.imuAcc.z, _x.angle.x, _x.angle.y, _x.angle.z,) = _get_struct_9f().unpack(str[start:end])
      start = end
      end += 16
      self.quaternions = _get_struct_4f().unpack(str[start:end])
      _x = self
      start = end
      end += 24
      (_x.systemTime, _x.accWorkNormal, _x.accIsOnLine, _x.gyroWorkNormal, _x.gyroIsOnLine, _x.eop.x, _x.eop.y, _x.eop.z, _x.supplyVoltage,) = _get_struct_I4B4f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_B6f().pack(_x.id, _x.position.x, _x.position.y, _x.position.z, _x.velocity.x, _x.velocity.y, _x.velocity.z))
      buff.write(self.distances.tostring())
      _x = self
      buff.write(_get_struct_9f().pack(_x.imuGyro.x, _x.imuGyro.y, _x.imuGyro.z, _x.imuAcc.x, _x.imuAcc.y, _x.imuAcc.z, _x.angle.x, _x.angle.y, _x.angle.z))
      buff.write(self.quaternions.tostring())
      _x = self
      buff.write(_get_struct_I4B4f().pack(_x.systemTime, _x.accWorkNormal, _x.accIsOnLine, _x.gyroWorkNormal, _x.gyroIsOnLine, _x.eop.x, _x.eop.y, _x.eop.z, _x.supplyVoltage))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.position is None:
        self.position = master_msg.msg.vector3d_t()
      if self.velocity is None:
        self.velocity = master_msg.msg.vector3d_t()
      if self.imuGyro is None:
        self.imuGyro = master_msg.msg.vector3d_t()
      if self.imuAcc is None:
        self.imuAcc = master_msg.msg.vector3d_t()
      if self.angle is None:
        self.angle = master_msg.msg.vector3d_t()
      if self.eop is None:
        self.eop = master_msg.msg.vector3d_t()
      end = 0
      _x = self
      start = end
      end += 25
      (_x.id, _x.position.x, _x.position.y, _x.position.z, _x.velocity.x, _x.velocity.y, _x.velocity.z,) = _get_struct_B6f().unpack(str[start:end])
      start = end
      end += 32
      self.distances = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=8)
      _x = self
      start = end
      end += 36
      (_x.imuGyro.x, _x.imuGyro.y, _x.imuGyro.z, _x.imuAcc.x, _x.imuAcc.y, _x.imuAcc.z, _x.angle.x, _x.angle.y, _x.angle.z,) = _get_struct_9f().unpack(str[start:end])
      start = end
      end += 16
      self.quaternions = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=4)
      _x = self
      start = end
      end += 24
      (_x.systemTime, _x.accWorkNormal, _x.accIsOnLine, _x.gyroWorkNormal, _x.gyroIsOnLine, _x.eop.x, _x.eop.y, _x.eop.z, _x.supplyVoltage,) = _get_struct_I4B4f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_4f = None
def _get_struct_4f():
    global _struct_4f
    if _struct_4f is None:
        _struct_4f = struct.Struct("<4f")
    return _struct_4f
_struct_I4B4f = None
def _get_struct_I4B4f():
    global _struct_I4B4f
    if _struct_I4B4f is None:
        _struct_I4B4f = struct.Struct("<I4B4f")
    return _struct_I4B4f
_struct_8f = None
def _get_struct_8f():
    global _struct_8f
    if _struct_8f is None:
        _struct_8f = struct.Struct("<8f")
    return _struct_8f
_struct_B6f = None
def _get_struct_B6f():
    global _struct_B6f
    if _struct_B6f is None:
        _struct_B6f = struct.Struct("<B6f")
    return _struct_B6f
_struct_9f = None
def _get_struct_9f():
    global _struct_9f
    if _struct_9f is None:
        _struct_9f = struct.Struct("<9f")
    return _struct_9f
