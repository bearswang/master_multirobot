# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from master_msg/node_frame2.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import master_msg.msg

class node_frame2(genpy.Message):
  _md5sum = "2bd4695057836d171d8201257d601e34"
  _type = "master_msg/node_frame2"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """uint8 role
uint8 id
uint32 systemTime
vector3d_t position
vector3d_t eop
vector3d_t velocity
float32[8] distances
vector3d_t imuGyro
vector3d_t imuAcc
vector3d_t angle
float32[4] quaternions
float32 supplyVoltage
node2_t[] nodes

================================================================================
MSG: master_msg/vector3d_t
float32 x
float32 y
float32 z

================================================================================
MSG: master_msg/node2_t
uint8 role
uint8 id
float32 distance
float32 fpRssi
float32 rxRssi
uint32 systemTime
"""
  __slots__ = ['role','id','systemTime','position','eop','velocity','distances','imuGyro','imuAcc','angle','quaternions','supplyVoltage','nodes']
  _slot_types = ['uint8','uint8','uint32','master_msg/vector3d_t','master_msg/vector3d_t','master_msg/vector3d_t','float32[8]','master_msg/vector3d_t','master_msg/vector3d_t','master_msg/vector3d_t','float32[4]','float32','master_msg/node2_t[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       role,id,systemTime,position,eop,velocity,distances,imuGyro,imuAcc,angle,quaternions,supplyVoltage,nodes

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(node_frame2, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.role is None:
        self.role = 0
      if self.id is None:
        self.id = 0
      if self.systemTime is None:
        self.systemTime = 0
      if self.position is None:
        self.position = master_msg.msg.vector3d_t()
      if self.eop is None:
        self.eop = master_msg.msg.vector3d_t()
      if self.velocity is None:
        self.velocity = master_msg.msg.vector3d_t()
      if self.distances is None:
        self.distances = [0.] * 8
      if self.imuGyro is None:
        self.imuGyro = master_msg.msg.vector3d_t()
      if self.imuAcc is None:
        self.imuAcc = master_msg.msg.vector3d_t()
      if self.angle is None:
        self.angle = master_msg.msg.vector3d_t()
      if self.quaternions is None:
        self.quaternions = [0.] * 4
      if self.supplyVoltage is None:
        self.supplyVoltage = 0.
      if self.nodes is None:
        self.nodes = []
    else:
      self.role = 0
      self.id = 0
      self.systemTime = 0
      self.position = master_msg.msg.vector3d_t()
      self.eop = master_msg.msg.vector3d_t()
      self.velocity = master_msg.msg.vector3d_t()
      self.distances = [0.] * 8
      self.imuGyro = master_msg.msg.vector3d_t()
      self.imuAcc = master_msg.msg.vector3d_t()
      self.angle = master_msg.msg.vector3d_t()
      self.quaternions = [0.] * 4
      self.supplyVoltage = 0.
      self.nodes = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2BI9f().pack(_x.role, _x.id, _x.systemTime, _x.position.x, _x.position.y, _x.position.z, _x.eop.x, _x.eop.y, _x.eop.z, _x.velocity.x, _x.velocity.y, _x.velocity.z))
      buff.write(_get_struct_8f().pack(*self.distances))
      _x = self
      buff.write(_get_struct_9f().pack(_x.imuGyro.x, _x.imuGyro.y, _x.imuGyro.z, _x.imuAcc.x, _x.imuAcc.y, _x.imuAcc.z, _x.angle.x, _x.angle.y, _x.angle.z))
      buff.write(_get_struct_4f().pack(*self.quaternions))
      buff.write(_get_struct_f().pack(self.supplyVoltage))
      length = len(self.nodes)
      buff.write(_struct_I.pack(length))
      for val1 in self.nodes:
        _x = val1
        buff.write(_get_struct_2B3fI().pack(_x.role, _x.id, _x.distance, _x.fpRssi, _x.rxRssi, _x.systemTime))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.position is None:
        self.position = master_msg.msg.vector3d_t()
      if self.eop is None:
        self.eop = master_msg.msg.vector3d_t()
      if self.velocity is None:
        self.velocity = master_msg.msg.vector3d_t()
      if self.imuGyro is None:
        self.imuGyro = master_msg.msg.vector3d_t()
      if self.imuAcc is None:
        self.imuAcc = master_msg.msg.vector3d_t()
      if self.angle is None:
        self.angle = master_msg.msg.vector3d_t()
      if self.nodes is None:
        self.nodes = None
      end = 0
      _x = self
      start = end
      end += 42
      (_x.role, _x.id, _x.systemTime, _x.position.x, _x.position.y, _x.position.z, _x.eop.x, _x.eop.y, _x.eop.z, _x.velocity.x, _x.velocity.y, _x.velocity.z,) = _get_struct_2BI9f().unpack(str[start:end])
      start = end
      end += 32
      self.distances = _get_struct_8f().unpack(str[start:end])
      _x = self
      start = end
      end += 36
      (_x.imuGyro.x, _x.imuGyro.y, _x.imuGyro.z, _x.imuAcc.x, _x.imuAcc.y, _x.imuAcc.z, _x.angle.x, _x.angle.y, _x.angle.z,) = _get_struct_9f().unpack(str[start:end])
      start = end
      end += 16
      self.quaternions = _get_struct_4f().unpack(str[start:end])
      start = end
      end += 4
      (self.supplyVoltage,) = _get_struct_f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.nodes = []
      for i in range(0, length):
        val1 = master_msg.msg.node2_t()
        _x = val1
        start = end
        end += 18
        (_x.role, _x.id, _x.distance, _x.fpRssi, _x.rxRssi, _x.systemTime,) = _get_struct_2B3fI().unpack(str[start:end])
        self.nodes.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2BI9f().pack(_x.role, _x.id, _x.systemTime, _x.position.x, _x.position.y, _x.position.z, _x.eop.x, _x.eop.y, _x.eop.z, _x.velocity.x, _x.velocity.y, _x.velocity.z))
      buff.write(self.distances.tostring())
      _x = self
      buff.write(_get_struct_9f().pack(_x.imuGyro.x, _x.imuGyro.y, _x.imuGyro.z, _x.imuAcc.x, _x.imuAcc.y, _x.imuAcc.z, _x.angle.x, _x.angle.y, _x.angle.z))
      buff.write(self.quaternions.tostring())
      buff.write(_get_struct_f().pack(self.supplyVoltage))
      length = len(self.nodes)
      buff.write(_struct_I.pack(length))
      for val1 in self.nodes:
        _x = val1
        buff.write(_get_struct_2B3fI().pack(_x.role, _x.id, _x.distance, _x.fpRssi, _x.rxRssi, _x.systemTime))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.position is None:
        self.position = master_msg.msg.vector3d_t()
      if self.eop is None:
        self.eop = master_msg.msg.vector3d_t()
      if self.velocity is None:
        self.velocity = master_msg.msg.vector3d_t()
      if self.imuGyro is None:
        self.imuGyro = master_msg.msg.vector3d_t()
      if self.imuAcc is None:
        self.imuAcc = master_msg.msg.vector3d_t()
      if self.angle is None:
        self.angle = master_msg.msg.vector3d_t()
      if self.nodes is None:
        self.nodes = None
      end = 0
      _x = self
      start = end
      end += 42
      (_x.role, _x.id, _x.systemTime, _x.position.x, _x.position.y, _x.position.z, _x.eop.x, _x.eop.y, _x.eop.z, _x.velocity.x, _x.velocity.y, _x.velocity.z,) = _get_struct_2BI9f().unpack(str[start:end])
      start = end
      end += 32
      self.distances = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=8)
      _x = self
      start = end
      end += 36
      (_x.imuGyro.x, _x.imuGyro.y, _x.imuGyro.z, _x.imuAcc.x, _x.imuAcc.y, _x.imuAcc.z, _x.angle.x, _x.angle.y, _x.angle.z,) = _get_struct_9f().unpack(str[start:end])
      start = end
      end += 16
      self.quaternions = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=4)
      start = end
      end += 4
      (self.supplyVoltage,) = _get_struct_f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.nodes = []
      for i in range(0, length):
        val1 = master_msg.msg.node2_t()
        _x = val1
        start = end
        end += 18
        (_x.role, _x.id, _x.distance, _x.fpRssi, _x.rxRssi, _x.systemTime,) = _get_struct_2B3fI().unpack(str[start:end])
        self.nodes.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_f = None
def _get_struct_f():
    global _struct_f
    if _struct_f is None:
        _struct_f = struct.Struct("<f")
    return _struct_f
_struct_8f = None
def _get_struct_8f():
    global _struct_8f
    if _struct_8f is None:
        _struct_8f = struct.Struct("<8f")
    return _struct_8f
_struct_2B3fI = None
def _get_struct_2B3fI():
    global _struct_2B3fI
    if _struct_2B3fI is None:
        _struct_2B3fI = struct.Struct("<2B3fI")
    return _struct_2B3fI
_struct_9f = None
def _get_struct_9f():
    global _struct_9f
    if _struct_9f is None:
        _struct_9f = struct.Struct("<9f")
    return _struct_9f
_struct_2BI9f = None
def _get_struct_2BI9f():
    global _struct_2BI9f
    if _struct_2BI9f is None:
        _struct_2BI9f = struct.Struct("<2BI9f")
    return _struct_2BI9f
_struct_4f = None
def _get_struct_4f():
    global _struct_4f
    if _struct_4f is None:
        _struct_4f = struct.Struct("<4f")
    return _struct_4f
